
SpiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000052  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000130  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f3  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000138  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c3  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{
	/*Set MOSI, SCK, and SS as output */
	DDRB |= (1 << 2)|(1 << 3)|(1 << 5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << 4);
  86:	24 98       	cbi	0x04, 4	; 4
	/*Enable SPI , Master, set clock rate fck/128*/
	SPCR |= (1 << MSTR);
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPR0)|(1 << SPR1);
  8e:	8c b5       	in	r24, 0x2c	; 44
  90:	83 60       	ori	r24, 0x03	; 3
  92:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	80 64       	ori	r24, 0x40	; 64
  98:	8c bd       	out	0x2c, r24	; 44
}
  9a:	08 95       	ret

0000009c <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
	/*Start Transmission*/
	SPDR = cData;
  9c:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
  9e:	0d b4       	in	r0, 0x2d	; 45
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <SPI_MasterTransmit+0x2>
		;
}
  a4:	08 95       	ret

000000a6 <delay_ms>:
//General short delays
void delay_ms(uint16_t x)
{
  a6:	0b c0       	rjmp	.+22     	; 0xbe <delay_ms+0x18>
  uint8_t y, z;
  for ( ; x > 0 ; x--){
  a8:	20 e0       	ldi	r18, 0x00	; 0
	...
    for ( y = 0 ; y < 90 ; y++){
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	2a 35       	cpi	r18, 0x5A	; 90
  ba:	b9 f7       	brne	.-18     	; 0xaa <delay_ms+0x4>
}
//General short delays
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	99 f7       	brne	.-26     	; 0xa8 <delay_ms+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
  c2:	08 95       	ret

000000c4 <main>:
void SPI_MasterInit(void);
void SPI_MasterTransmit(char cData);
//======================

int main (void)
{
  c4:	1f 93       	push	r17
    SPI_MasterInit();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <SPI_MasterInit>
	SPCR |= (1 << SPE);
}
void SPI_MasterTransmit(char cData)
{
	/*Start Transmission*/
	SPDR = cData;
  ca:	1f e0       	ldi	r17, 0x0F	; 15
  cc:	1e bd       	out	0x2e, r17	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0xa>
{
    SPI_MasterInit();
	while(1)
	{
		SPI_MasterTransmit(0x0F);
		delay_ms(500);
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <main+0x8>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
