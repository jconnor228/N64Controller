
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000440  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c5  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000869  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000224  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000606  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019e  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ee  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  88:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_MasterInit>:
}

void SPI_MasterInit(void)
{
	/*Set CE, MOSI, SCK, and SS/CSN as output */
	DDRB |= (1 << 1)|(1 << 2)|(1 << 3)|(1 << 5);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8e 62       	ori	r24, 0x2E	; 46
  94:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << 4);//set MISO as input
  96:	24 98       	cbi	0x04, 4	; 4
	/*Set as Master, set clock rate fck/128, SpiEnable */
	SPCR |= (1 << MSTR);
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPR0)|(1 << SPR1);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= (1 << 2);//CSN high to begin with, no communication with NRF yet
  aa:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1 << 1);//CE low to begin with since nothing being sent/received
  ac:	29 98       	cbi	0x05, 1	; 5
}
  ae:	08 95       	ret

000000b0 <WriteByteSPI>:

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
  b0:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <WriteByteSPI+0x2>
		;
	return SPDR;//return what's recieved to the nRF
  b8:	8e b5       	in	r24, 0x2e	; 46
}
  ba:	08 95       	ret

000000bc <INT0_interrupt_init>:

void INT0_interrupt_init(void)	
{
	DDRD &= ~(1 << DDD2);	//Set PD2 as input (INT0 pin)
  bc:	52 98       	cbi	0x0a, 2	; 10
	
	EICRA |=  (1 << ISC01);// INT0 falling edge generates request	PD2
  be:	e9 e6       	ldi	r30, 0x69	; 105
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
	EICRA  &=  ~(1 << ISC00);// same as above
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
 
	EIMSK |=  (1 << INT0);	//enable int0 external interrupt request
  ce:	e8 9a       	sbi	0x1d, 0	; 29
  	sei();// enables global interrupts
  d0:	78 94       	sei
} 
  d2:	08 95       	ret

000000d4 <WriteToNrf>:

/*****************nrf-setup**************************///Sets the nrf first by sending the register, then the value of the register.
uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)	//takes in "ReadWrite" (W or R), "reg" (ett register), "*val" (an array) & "antVal" (number of values in val)
{
  d4:	1f 93       	push	r17
  d6:	78 2f       	mov	r23, r24
	cli();	//disable global interrupts so no interrupts can interfere with the write process
  d8:	f8 94       	cli
	
	if (ReadWrite == W)	//W = write to nrf (R= reads it, R_REGISTER (0x00)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	09 f4       	brne	.+2      	; 0xe0 <WriteToNrf+0xc>
	{
		reg = W_REGISTER + reg;	//ex: reg = EN_AA: 0b0010 0000 + 0b0000 0001 = 0b0010 0001  
  de:	60 5e       	subi	r22, 0xE0	; 224
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e0:	85 e3       	ldi	r24, 0x35	; 53
  e2:	98 2f       	mov	r25, r24
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <WriteToNrf+0x10>
	
	//Static uint8_t returns an array (note the "*")
	static uint8_t ret[dataLen];	//assume that the longest you want it to read when it calls the "R" is n(some amount) - far, and that it uses only 1 byte times n. You want to read out 5 bytes RF_Address so the write 5 is here!!	
	
	_delay_us(10);		//the proper delay for the NRF! (microseconds)
	PORTB &= ~(1 << 2);;	//CSN low = nrf chip starts listening
  e8:	2a 98       	cbi	0x05, 2	; 5
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <WriteToNrf+0x16>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
  ee:	6e bd       	out	0x2e, r22	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <WriteToNrf+0x1c>
		;
	return SPDR;//return what's recieved to the nRF
  f6:	8e b5       	in	r24, 0x2e	; 46
  f8:	85 e3       	ldi	r24, 0x35	; 53
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <WriteToNrf+0x26>
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
	_delay_us(10);		
	WriteByteSPI(reg);	//set the nRF to write or read mode of "reg"
	_delay_us(10); 		
	
	int i;
	for(i=0; i<antVal; i++)
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	95 e3       	ldi	r25, 0x35	; 53

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 106:	1f ef       	ldi	r17, 0xFF	; 255
 108:	1b c0       	rjmp	.+54     	; 0x140 <WriteToNrf+0x6c>
	_delay_us(10); 		
	
	int i;
	for(i=0; i<antVal; i++)
	{
		if (ReadWrite == R && reg != W_TX_PAYLOAD)//want to read a registry?
 10a:	77 23       	and	r23, r23
 10c:	61 f4       	brne	.+24     	; 0x126 <WriteToNrf+0x52>
 10e:	60 3a       	cpi	r22, 0xA0	; 160
 110:	51 f0       	breq	.+20     	; 0x126 <WriteToNrf+0x52>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 112:	1e bd       	out	0x2e, r17	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <WriteToNrf+0x40>
		;
	return SPDR;//return what's recieved to the nRF
 11a:	8e b5       	in	r24, 0x2e	; 46
	int i;
	for(i=0; i<antVal; i++)
	{
		if (ReadWrite == R && reg != W_TX_PAYLOAD)//want to read a registry?
		{
			ret[i]=WriteByteSPI(NOP);//send dummy bytes to read out the data
 11c:	fd 01       	movw	r30, r26
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 83       	st	Z, r24
 124:	09 c0       	rjmp	.+18     	; 0x138 <WriteToNrf+0x64>
			_delay_us(10);			
		}
		else 
		{
			WriteByteSPI(val[i]);//send commands to the nRF one at a time
 126:	fa 01       	movw	r30, r20
 128:	ea 0f       	add	r30, r26
 12a:	fb 1f       	adc	r31, r27
 12c:	80 81       	ld	r24, Z

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 12e:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 130:	0d b4       	in	r0, 0x2d	; 45
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <WriteToNrf+0x5c>
		;
	return SPDR;//return what's recieved to the nRF
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	89 2f       	mov	r24, r25
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <WriteToNrf+0x66>
	_delay_us(10);		
	WriteByteSPI(reg);	//set the nRF to write or read mode of "reg"
	_delay_us(10); 		
	
	int i;
	for(i=0; i<antVal; i++)
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	a2 17       	cp	r26, r18
 142:	b3 07       	cpc	r27, r19
 144:	14 f3       	brlt	.-60     	; 0x10a <WriteToNrf+0x36>
		{
			WriteByteSPI(val[i]);//send commands to the nRF one at a time
			_delay_us(10);
		}		
	}
	PORTB |= (1 << 2);	//CSN back to high - nrf chip stops listening
 146:	2a 9a       	sbi	0x05, 2	; 5
	
	sei(); //re-enable global interrupts
 148:	78 94       	sei
	
	return ret;	//returns an array
}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	1f 91       	pop	r17
 150:	08 95       	ret

00000152 <nrf24L01_init>:

/****************************************************************************************************************/

void nrf24L01_init(void)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <nrf24L01_init+0xc>
 15e:	00 d0       	rcall	.+0      	; 0x160 <nrf24L01_init+0xe>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	88 ee       	ldi	r24, 0xE8	; 232
 168:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16a:	20 e9       	ldi	r18, 0x90	; 144
 16c:	31 e0       	ldi	r19, 0x01	; 1
 16e:	f9 01       	movw	r30, r18
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <nrf24L01_init+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <nrf24L01_init+0x1c>
	
	uint8_t val[5];	//an array of integers to send to WriteToNrf function
	
	//EN_AA - (enable auto-acknowledgements) - transmitter gets automatic response from reciever on successful transmit
	//only works if transmitter has identical rf address on its channel ex: RX_ADDR_P0 = TX_ADDR
	val[0]=0x01;//value: 0x01 = EN_AA on pipe 0.
 178:	11 e0       	ldi	r17, 0x01	; 1
 17a:	19 83       	std	Y+1, r17	; 0x01
	WriteToNrf(W, EN_AA, val, 1);//W=write mode, EN_AA=register to write to, val=data to write, 1=number of bytes
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	7e 01       	movw	r14, r28
 182:	08 94       	sec
 184:	e1 1c       	adc	r14, r1
 186:	f1 1c       	adc	r15, r1
 188:	a7 01       	movw	r20, r14
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
	//SETUP_RETR (setup of automatic retransmission)
	val[0]=0x2F;//2 = 750us between retransmissions
 190:	8f e2       	ldi	r24, 0x2F	; 47
 192:	89 83       	std	Y+1, r24	; 0x01
	//(at least 500us at 250kbps and if payload >5bytes in 1Mbps, and if payload >15byte in 2Mbps)
    // "F" is number of retries (1-15, F=15 retries = max)
	WriteToNrf(W, SETUP_RETR, val, 1);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	a7 01       	movw	r20, r14
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
	//Selects data pipes (0-5) that should be running.
	val[0]=0x01; //enable data pipe 0
 1a0:	19 83       	std	Y+1, r17	; 0x01
	WriteToNrf(W, EN_RXADDR, val, 1); 
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	a7 01       	movw	r20, r14
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
    //RF_Address width setup (3-5 bytes, "11" = 5 bytes)
	val[0]=0x03;//0000 0011
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, SETUP_AW, val, 1);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	a7 01       	movw	r20, r14
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
 
	//RF channel setup - choose freq 2.400-2.527GHz 1MHz/step
	val[0]=0x01;
 1be:	19 83       	std	Y+1, r17	; 0x01
	WriteToNrf(W, RF_CH, val, 1); //RF channel registry 0b0000 0001 = 2.401 GHz (same on the TX RX)
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	a7 01       	movw	r20, r14
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
 
	//RF setup	- choose signal power and data speed 
	val[0]=0x07; //0000 0111
 1cc:	87 e0       	ldi	r24, 0x07	; 7
 1ce:	89 83       	std	Y+1, r24	; 0x01
	//bit 0 is don't care
	//bit 2-1 gives power ("11" = 0dBm; "00" = -18dBm, can also choose -6dBm and -12dBm)
	//bit 3 and 5 give data speed, 00=1Mbps, 01=2Mbps, 10=250kbps
	WriteToNrf(W, RF_SETUP, val, 1);//0dBm (max power) and 1Mbps (middle data speed)
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	66 e0       	ldi	r22, 0x06	; 6
 1d4:	a7 01       	movw	r20, r14
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	//RX RF_Address setup 5 bytes - choose RF_Address on The receiver
	// (Must be given the same RF_Address if the transmitter has EN_AA turned on!)
	int i;
	for(i=0; i<5; i++)	
	{
		val[i]=0x12;//RF channel registry 0b 0001 0010 x 5 
 1dc:	12 e1       	ldi	r17, 0x12	; 18
 1de:	19 83       	std	Y+1, r17	; 0x01
 1e0:	1a 83       	std	Y+2, r17	; 0x02
 1e2:	1b 83       	std	Y+3, r17	; 0x03
 1e4:	1c 83       	std	Y+4, r17	; 0x04
 1e6:	1d 83       	std	Y+5, r17	; 0x05
		//- writes the same RF_Address 5 times to get an easy and safe RF_Address (same on the transmitter chip!)
	}
	WriteToNrf(W, RX_ADDR_P0, val, 5); //write address created in val as RX_address 
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	a7 01       	movw	r20, r14
 1ee:	25 e0       	ldi	r18, 0x05	; 5
 1f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
	//TX RF_Address setup 5 byte-choose RF_Address on transmitter
	//int i; //reuse previous i
	for(i=0; i<5; i++)	
	{
		val[i]=0x12; //RF channel registry 0b 0001 0010 x 5 - writes the same RF_Address 5 times 
 1f4:	19 83       	std	Y+1, r17	; 0x01
 1f6:	1a 83       	std	Y+2, r17	; 0x02
 1f8:	1b 83       	std	Y+3, r17	; 0x03
 1fa:	1c 83       	std	Y+4, r17	; 0x04
 1fc:	1d 83       	std	Y+5, r17	; 0x05
		//to get an easy and safe RF_Adress 
		//(same on the Receiver chip and the RX-RF_Address above if EN_AA enabled!)
	}
	WriteToNrf(W, TX_ADDR, val, 5);//write same address as TX_Address since EN_AA is enabled
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	60 e1       	ldi	r22, 0x10	; 16
 202:	a7 01       	movw	r20, r14
 204:	25 e0       	ldi	r18, 0x05	; 5
 206:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
 
	//Payload width setup - How many bytes will be sent by air? 1-32byte per transmission
	val[0]=dataLen;	//dataLen is defined earlier (currently 5 (bytes) )
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	89 83       	std	Y+1, r24	; 0x01
	//same on transmitter and receiver
	WriteToNrf(W, RX_PW_P0, val, 1);//RX Payload Width on Pipe 0 = RX_PW_P0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	61 e1       	ldi	r22, 0x11	; 17
 212:	a7 01       	movw	r20, r14
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
	//CONFIG reg setup - Now everything is set up, boot up nrf and make it either Transmitter or Reciver
	val[0]=0x1E;  //0b 0001 1110 config registry 
 21a:	8e e1       	ldi	r24, 0x1E	; 30
 21c:	89 83       	std	Y+1, r24	; 0x01
	//bit 0=0:transmitter,bit 0=1:receiver,
	//bit 1=1 power up,bit 4=1: mask_Max_RT i.e. IRQ interrupt isn't triggered if transmission failed
	//bits 2-3 CRC encoding scheme(?)
	WriteToNrf(W, CONFIG, val, 1);//transmitter,power up,CRC enabled 2byte encoding,maskMaxRT 
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	a7 01       	movw	r20, r14
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
 22a:	88 ee       	ldi	r24, 0xE8	; 232
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	20 e9       	ldi	r18, 0x90	; 144
 230:	31 e0       	ldi	r19, 0x01	; 1
 232:	f9 01       	movw	r30, r18
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <nrf24L01_init+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 238:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23a:	d9 f7       	brne	.-10     	; 0x232 <nrf24L01_init+0xe0>
 
    //device need 1.5ms to reach standby mode
	_delay_ms(100);	
 
	sei();	
 23c:	78 94       	sei
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	1f 91       	pop	r17
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	08 95       	ret

00000254 <receive_payload>:
//receive data
void receive_payload(void)
{
	//sei();		//Enable global interrupt
	
	PORTB |= (1 << 1);	//CE goes high, "listening"
 254:	29 9a       	sbi	0x05, 1	; 5
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	97 e2       	ldi	r25, 0x27	; 39
 25a:	20 e9       	ldi	r18, 0x90	; 144
 25c:	31 e0       	ldi	r19, 0x01	; 1
 25e:	f9 01       	movw	r30, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <receive_payload+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 264:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 266:	d9 f7       	brne	.-10     	; 0x25e <receive_payload+0xa>
	_delay_ms(1000);	//Listen for 1 second, interrupt int0 executes
	PORTB &= ~(1 << 1); //CE goes low, "stop listening"
 268:	29 98       	cbi	0x05, 1	; 5
	
	//cli();	//Disable global interrupt
}
 26a:	08 95       	ret

0000026c <transmit_payload>:
 
//Send data
void transmit_payload(uint8_t * W_buff)
{
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	8c 01       	movw	r16, r24
	WriteToNrf(R, FLUSH_TX, W_buff, 0);//send 0xE1 which flushes the registry of old data 
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	61 ee       	ldi	r22, 0xE1	; 225
 276:	a8 01       	movw	r20, r16
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	WriteToNrf(R, W_TX_PAYLOAD, W_buff, dataLen);//send data in W_buff to nrf
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	60 ea       	ldi	r22, 0xA0	; 160
 282:	a8 01       	movw	r20, r16
 284:	25 e0       	ldi	r18, 0x05	; 5
 286:	0e 94 6a 00 	call	0xd4	; 0xd4 <WriteToNrf>
	
	sei();	//enable global interrupts
 28a:	78 94       	sei
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	9c e9       	ldi	r25, 0x9C	; 156
 290:	fc 01       	movw	r30, r24
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <transmit_payload+0x26>
 
	_delay_ms(10);		//necessary delay
	PORTB |= (1 << 1);	//CE high, send data, int0 interrupt
 296:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 298:	2a e6       	ldi	r18, 0x6A	; 106
 29a:	2a 95       	dec	r18
 29c:	f1 f7       	brne	.-4      	; 0x29a <transmit_payload+0x2e>
	_delay_us(20);		//at least 10us needed
	PORTB &= ~(1 << 1);	//CE low
 29e:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <transmit_payload+0x34>
	_delay_ms(10);		//necessary delay
 
	//cli();	//Disable global interrupt.. 
}
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <main>:
//void WriteToNrf(uint8_t reg, uint8_t Package);
//void initTimer0(void);
//======================

int main (void)
{
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <main+0xa>
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <main+0xc>
 2b6:	0f 92       	push	r0
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1 << 5); //port c bit 5 set as output so we can use the LED as an indicator
 2bc:	3d 9a       	sbi	0x07, 5	; 7
	SPI_MasterInit(); //initialize SPI 
 2be:	0e 94 48 00 	call	0x90	; 0x90 <SPI_MasterInit>
	INT0_interrupt_init();//INT0 interrupt is triggered when CE pin switches, signals data transfer to nRF
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <INT0_interrupt_init>
	nrf24L01_init();//initalizes the nrF module to our desired specifications(channel,power,data width,TX/RX)
 2c6:	0e 94 a9 00 	call	0x152	; 0x152 <nrf24L01_init>
	
	PORTC |= (1 << 5);//turn LED on
 2ca:	45 9a       	sbi	0x08, 5	; 8
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	9e e4       	ldi	r25, 0x4E	; 78
 2d0:	20 e9       	ldi	r18, 0x90	; 144
 2d2:	31 e0       	ldi	r19, 0x01	; 1
 2d4:	f9 01       	movw	r30, r18
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <main+0x2a>
	_delay_ms(2000);//this is to test LED operation
	PORTC &= ~(1 << 5);//turn LED back off
 2de:	45 98       	cbi	0x08, 5	; 8
	uint8_t W_Buffer[5];
	int i;
	
	for(i = 0; i < 5; i++)
		{
			W_Buffer[i] = 0x0F;
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	8b 83       	std	Y+3, r24	; 0x03
 2e8:	8c 83       	std	Y+4, r24	; 0x04
 2ea:	8d 83       	std	Y+5, r24	; 0x05
		}
	
	while(1)
	{
		transmit_payload(W_Buffer);//repeatedly send data to test if module works
 2ec:	8e 01       	movw	r16, r28
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
 2f2:	c8 01       	movw	r24, r16
 2f4:	0e 94 36 01 	call	0x26c	; 0x26c <transmit_payload>
 2f8:	fc cf       	rjmp	.-8      	; 0x2f2 <main+0x48>

000002fa <reset>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	98 2f       	mov	r25, r24
 2fe:	9a 95       	dec	r25
 300:	f1 f7       	brne	.-4      	; 0x2fe <reset+0x4>
/**************************************************************************************************************/

void reset(void)//called after a successful data transmission
{
	_delay_us(10);
	PORTB &= ~(1 << 2);//CSN low
 302:	2a 98       	cbi	0x05, 2	; 5
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <reset+0xa>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 308:	87 e2       	ldi	r24, 0x27	; 39
 30a:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 30c:	0d b4       	in	r0, 0x2d	; 45
 30e:	07 fe       	sbrs	r0, 7
 310:	fd cf       	rjmp	.-6      	; 0x30c <reset+0x12>
		;
	return SPDR;//return what's recieved to the nRF
 312:	8e b5       	in	r24, 0x2e	; 46
 314:	85 e3       	ldi	r24, 0x35	; 53
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <reset+0x1c>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 31a:	80 e7       	ldi	r24, 0x70	; 112
 31c:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 31e:	0d b4       	in	r0, 0x2d	; 45
 320:	07 fe       	sbrs	r0, 7
 322:	fd cf       	rjmp	.-6      	; 0x31e <reset+0x24>
		;
	return SPDR;//return what's recieved to the nRF
 324:	8e b5       	in	r24, 0x2e	; 46
 326:	85 e3       	ldi	r24, 0x35	; 53
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <reset+0x2e>
	_delay_us(10);
	WriteByteSPI(W_REGISTER + STATUS);	//write to status registry
	_delay_us(10);
	WriteByteSPI(0x70);	//reset all irq in status registry
	_delay_us(10);
	PORTB |= (1 << 2);	//CSN back to high, nRF doing nothing
 32c:	2a 9a       	sbi	0x05, 2	; 5
}
 32e:	08 95       	ret

00000330 <__vector_1>:
/***************************************************************************************************************/
//When you use interrupt, it is crucial that you enables the external interrupts by the command sei();
// This should be done before the receive_payload, and transmit_payload is used.

ISR(INT0_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	cli();	//Disable global interrupt
 352:	f8 94       	cli
	PORTB &= ~(1 << 1);//CE back to low-"stop listening/transmitting"
 354:	29 98       	cbi	0x05, 1	; 5
	
	PORTC |= (1 << 5);//turn LED on to show interrupt was executed
 356:	45 9a       	sbi	0x08, 5	; 8
 358:	80 e1       	ldi	r24, 0x10	; 16
 35a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35c:	20 e9       	ldi	r18, 0x90	; 144
 35e:	31 e0       	ldi	r19, 0x01	; 1
 360:	f9 01       	movw	r30, r18
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <__vector_1+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 368:	d9 f7       	brne	.-10     	; 0x360 <__vector_1+0x30>
	_delay_ms(1000);
	PORTC &= ~(1 << 5); //led off
 36a:	45 98       	cbi	0x08, 5	; 8
	
	reset();
 36c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <reset>
	sei();
 370:	78 94       	sei
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <GetReg>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 394:	95 e3       	ldi	r25, 0x35	; 53
 396:	29 2f       	mov	r18, r25
 398:	2a 95       	dec	r18
 39a:	f1 f7       	brne	.-4      	; 0x398 <GetReg+0x4>
//Read a register on the nRF
uint8_t GetReg(uint8_t reg)
{	
	//begin with a delay for timing purposes
	_delay_us(10);	
	PORTB &= ~(1 << 2);//CSN low
 39c:	2a 98       	cbi	0x05, 2	; 5
 39e:	9a 95       	dec	r25
 3a0:	f1 f7       	brne	.-4      	; 0x39e <GetReg+0xa>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 3a2:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 3a4:	0d b4       	in	r0, 0x2d	; 45
 3a6:	07 fe       	sbrs	r0, 7
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <GetReg+0x10>
		;
	return SPDR;//return what's recieved to the nRF
 3aa:	8e b5       	in	r24, 0x2e	; 46
 3ac:	85 e3       	ldi	r24, 0x35	; 53
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <GetReg+0x1a>

//send or recieve a byte from the nRF
char WriteByteSPI(unsigned char cData)
{
	/*Start Transmission*/
	SPDR = cData;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission*/
	while(!(SPSR & (1 << SPIF)))
 3b6:	0d b4       	in	r0, 0x2d	; 45
 3b8:	07 fe       	sbrs	r0, 7
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <GetReg+0x22>
		;
	return SPDR;//return what's recieved to the nRF
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	95 e3       	ldi	r25, 0x35	; 53
 3c0:	9a 95       	dec	r25
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <GetReg+0x2c>
	_delay_us(10);
	WriteByteSPI(R_REGISTER + reg);	//R_Register = set nRF to reading mode, "reg" will be read back
	_delay_us(10);
	reg = WriteByteSPI(NOP);//Send dummy byte to recieve back first byte in reg register
	_delay_us(10);
	PORTB |= (1 << 2);	//CSN back to high, nRF doing nothing
 3c4:	2a 9a       	sbi	0x05, 2	; 5
	return reg;	// Return the read registry
}
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
